@startuml "Laser Tag Diagram"

skinparam classFontStyle Bold

package laser_tag {
    package configuration {
        class configuration {
            VERSION
            GAME_NAME
            TARGET_FPS
            DEFAULT_FONT
            DATA_PATH
            ASSETS_PATH
            SETTINGS_FILE
            LANGUAGE_FILE
            WORLDS_PATH
            GAME_WORLD_FILE
            LEVEL_EDITOR_WORLD_FILE
            SCREENSHOTS_PATH
            NETWORK_BUFFER_SIZE
            SERVER_DEFAULT_MAX_CLIENTS
            SERVER_DELTA_TIME_NAME
            SERVER_TIMEOUT
            SERVER_SOCKET_TIMEOUT
            SERVER_EVENTS_LIFESPAN
            CLIENT_TIMEOUT
            CLIENT_MINIMUM_TICK
            DEFAULT_TEXTURE_CACHE_LIMIT
            MAX_WALL_HEIGHT
            MAX_RAY_DISTANCE
            MAX_PLAYER_NAME_LENGTH
            MUSIC_FADEOUT_MS
            AUDIO_CHANNELS
            ENTITIES_ROTATION_FRAMES
            VARIABLES: Variables
        }

        class Variables {
            version
            settings_file
            variables_save_exclusion
            full_screen_width
            full_screen_height
            screen_width
            screen_height
            fullscreen
            windowed_resolution_ratio
            resize_display
            fps
            show_fps
            show_network_stats
            show_components_outline
            show_rays_minimap
            show_minimap
            show_all_entities_minimap
            anti_aliased_text
            debug
            rotate_sensitivity
            player_name
            fov
            ray_width
            rays_quantity
            world_scale
            latest_join_ip
            latest_join_port
            latest_host_port
            assets_folder
            language
            volume_global
            volume_music
            volume_effects

            load()
            save()
            set_full_screen_size(width, height)
            set_screen_size(width, height)
        }

        configuration --> Variables
    }

    package math {
        class Circle
        {
            origin: Point
            radius

            create(parsed_object): Circle
            collides_with(other): Boolean
            collides_with_circle(other: Circle): Boolean
            collides_with_point(other: Point): Boolean
            collides_with_segment(other: Line): Boolean
        }

        class Line {
            point1: Point
            point2: Point
            distance
            rotation
            margin

            create(parsed_object): Line
            get_intersection_line(line: Line): Point
            get_intersection_segment(line: Line): Point
            get_coordinates(map_bounds)
            get_distance()
            get_rotation()
        }

        class Point {
            x
            y

            create(parsed_object): Point
        }

        Box --> Point
        Circle --> Point
        Circle --> Line
        Line --> Point
    }

    package utils {
        class DeltaTime {
            id
            previous_time
            current_time
            dt
            dt_target

            reset(current_time)
            update(current_time)
            set_dt(dt)
            get_dt()
            get_dt_target()
        }

        class Timer {
            timer_start
            timer_end

            start()
            stop()
            get_time()
        }
    }

    package events {
        enum Event {
            NONE
            TICK
            START_GAME
            CHANGE_GAME_MODE
            CHANGE_PLAYER_TEAM
            PLAYER_JOIN
            PLAYER_LEAVE
            PLAY_SOUND
            PLAY_SOUND_LOCAL
            MESSAGE
            TYPE_CHAR
            GAME_MOVE
            GAME_MOVE_FORWARD
            GAME_MOVE_BACKWARD
            GAME_MOVE_LEFT
            GAME_MOVE_RIGHT
            GAME_RUN
            GAME_JUMP
            GAME_CROUCH
            GAME_RELOAD
            GAME_SHOOT
            GAME_ROTATE
            GAME_SCOREBOARD
            KEY_ESCAPE
            KEY_ESCAPE_PRESS
            KEY_RETURN
            KEY_RETURN_PRESS
            KEY_BACKSPACE
            KEY_BACKSPACE_PRESS
            KEY_TAB
            KEY_UP
            KEY_DOWN
            KEY_LEFT
            KEY_RIGHT
            MOUSE_MOVE
            MOUSE_LEFT_CLICK
            MOUSE_LEFT_CLICK_PRESS
            MOUSE_LEFT_CLICK_RELEASE
            MOUSE_RIGHT_CLICK
            MOUSE_RIGHT_CLICK_PRESS
            MOUSE_RIGHT_CLICK_RELEASE
            MOUSE_MIDDLE_CLICK
            MOUSE_MIDDLE_CLICK_PRESS
            MOUSE_MIDDLE_CLICK_RELEASE
            MOUSE_SCROLL_UP
            MOUSE_SCROLL_DOWN
            WINDOW_RESIZE
            WINDOW_FULLSCREEN
            WINDOW_QUIT
            SCREENSHOT
        }

        class EventInstance {
            timestamp
            id
            data
            local: Boolean
            game: Boolean
            server: Boolean

            create(parsed_object): EventInstance
        }

        class ServerEvents {
            server_mode: Boolean
            events
            tick_events: EventInstance[]
            server_id
            client_id

            add_event(event: EventInstance)
            get_events_to_send()
            update(): EventInstance[]
            get_events_for_tick(): EventInstance[]
            set_state(parsed_object)
        }

        EventInstance --> Event
        ServerEvents --> EventInstance
    }

    package audio {
        enum Audio {
            MENU_1
        }

        class AudioManager {
            audio

            set_audio_player(audio)
            set_listening_position(position: Point)
            update(events: EventInstance[])
        }

        class AudioPlayer {
            sounds
            channel_index
            transition_music
            listening_position
            latest_global_volume
            latest_music_volume
            latest_effects_volume

            load_sound(audio: Audio, path)
            play_sound(audio: Audio)
            play_music(audio: Audio, fadeout_time)
            update_volume()
            set_listening_position(position: Point)
            update(events: EventInstance[])
        }
    }

    package entities {
        class Entity {
            position: Point
            collider: Circle
            rotation
            alive: Boolean

            create(parsed_object): Entity
            move(x, y)
            collides_with(other: Entity): Boolean
        }

        class GameEntity extends Entity {
            move_speed
            run_speed_multiplier
            crouch_speed_multiplier
            attack_speed
            next_attack_timestamps
            damages
            can_move: Boolean
            can_attack: Boolean
            can_be_attacked: Boolean
            is_running: Boolean
            is_crouching: Boolean
            score
            score_reward
            eliminations
            deaths
            team
            hp

            create(parsed_object): GameEntity
            entity_radius()
            reset()
            move(x, y)
            set_max_hp(max_hp)
            death(no_deletion: Boolean)
            attack(): Boolean
            check_can_be_attacked(): Boolean
            damage(damage): Boolean
            heal(heal)
            on_hit(entity: GameEntity)
            on_kill(entity: GameEntity)
        }

        class BarrelShort extends GameEntity {
            create(parsed_object): BarrelShort
            entity_radius()
            death()
        }

        class BarrelTall extends GameEntity {
            create(parsed_object): BarrelTall
            entity_radius()
            death()
        }

        class Player extends GameEntity {
            name
            deactivation_time
            deactivated_until_timestamp
            deactivation_time_ratio

            create(parsed_object): Player
            entity_radius()
            get_deactivation_time_ratio()
            death()
            check_can_be_attacked()
            set_name(name)
        }

        class LaserRay extends Entity {
            end_position
            parent_id
            get_entity_fct
            time_to_live

            create(parsed_object): LaserRay
            entity_radius()
            on_hit(entity: GameEntity)
            on_kill(entity: GameEntity)
            death()
            attack(): Boolean
            give_stats_to_parent()
            collides_with(other: Entity): Boolean
        }

        Entity --> Point
        Entity --> Circle
    }

    package game {
        class Game {
            server_mode: Boolean
            game_mode: GameMode
            world: World
            server_events: ServerEvents
            mouse_x
            mouse_y
            show_scoreboard: Boolean
            lock_cursor: Boolean
            game_paused: Boolean

            set_state(parsed_object)
            reset()
            enhance_events(events: EventInstance[])
            update(events: EventInstance[], controlled_entity_id, delta_time: DeltaTime, player_delta_time: DeltaTime)
        }

        enum Mode {
            SOLO
            TEAM
            SOLO_ELIMINATION
            TEAM_ELIMINATION
        }

        class GameMode {
            language: Language
            game_mode: Mode
            game_started: Boolean
            grace_period_end
            game_time_end
            grace_time_seconds
            leaderboard
            scoreboard

            set_state(parsed_object)
            reset(game_mode)
            start(): Boolean
            is_game_started(): Boolean
            update_leaderboard(entities: GameEntity[])
            update_scoreboard(entities: GameEntity[])
            change_mode(mode: Mode): Boolean
            get_teams_available(mode: Mode): Team[]
            update(entities: GameEntity[])
        }

        enum WallType {
            WALL_1
            WALL_2
            WALL_3
            WALL_4
        }

        class Wall {
            type: WallType
            line: Line

            create(parsed_object): Wall
            get_line(): Line
            get_type(): WallType
        }

        class Map {
            walls: Wall[]
            spawn_points: Point[]
            spatial_partitioning
            map_min_x
            map_min_y
            map_max_x
            map_max_y
            margin

            set_walls(walls: Wall[])
            get_spawn_point(): Point
            get_map_bounds()
            generate_partitioning_cache()
            collides_with(collider: Circle): Boolean
            cast_ray(origin: Point, direction): Ray
        }

        class World {
            map: Map
            entities
            controller_entity
            current_uid

            set_state(parsed_object)
            load_world(world_file)
            get_uid()
            spawn_entity(entity: GameEntity)
            get_entity(uid): GameEntity
            remove_entity(uid)
            set_controlled_entity(uid)
            change_player_team(id, team: Team)
            reset_teams(teams: Team[])
            get_current_position(): Point
            enhance_events(events: EventInstance[])
            update(events: EventInstance[], controlled_entity_id, delta_time: DeltaTime, player_delta_time: DeltaTime)
            move_entity(entity: GameEntity, movement_vector: Point)
            cast_rays()
        }

        class Ray {
            origin: Point
            direction
            distance

            set_hit(hit_point: Point, hit_infos, distance)
        }

        enum Team {
            NONE
            RED
            BLUE
            GREEN
            YELLOW
            ORANGE
            PINK
            BLACK
            WHITE
        }

        Game --> GameMode
        Game --> World
        Game --> EventInstance
        Game --> DeltaTime
        GameMode --> Mode
        GameMode --> GameEntity
        World --> Map
        World --> GameEntity
        World --> EventInstance
        Map --> Point
        Map --> Circle
        Map --> Ray
        Ray --> Point
    }

    package network {
        class Client {
            ip
            port
            debug: Boolean
            connected: Boolean
            thread
            events_to_send
            data_received
            bytes_sent
            bytes_received
            pings
            socket

            client()
            send(data)
            recv()
            add_events_to_send(events: EventInstance[])
            get_events_to_send(): EventInstance[]
            add_received_data(data)
            get_received_data()
            set_network_stats(ping, bytes_sent, bytes_received)
            get_network_stats()
            is_connected(): Boolean
            disconnect()
        }

        class Server {
            port
            debug: Boolean
            socket
            max_clients
            clients
            game: Game
            server_delta_time: DeltaTime
            running: Boolean
            running_thread

            start()
            run()
            client(client: ClientInstance)
            send(client: ClientInstance, data)
            recv(client: ClientInstance)
            set_max_clients(max_clients)
            get_state(client: ClientInstance)
            parse_events(data)
            stop()
            get_port()
        }

        class ClientInstance {
            info
            conn
            thread
            data
            controlled_entity_id
        }

        class ClientServerGroup {
            client: Client
            server: Server

            connect_client(ip, port, debug: Boolean)
            is_client_connected(): Boolean
            disconnect_client()
            get_client(): Client
            start_server(port, debug: Boolean)
            is_server_running(): Boolean
            stop_server()
            get_server(): Server
        }

        ClientServerGroup --> Client
        ClientServerGroup --> Server
        Client --> EventInstance
        Server --> Game
        Server --> DeltaTime
        Server --> ClientInstance
    }

    package language {
        enum LanguageKey {
            GAME_NAME
            DEFAULT_PLAYER_NAME
            NETWORK_STATS_CONNECTED
            NETWORK_STATS_DISCONNECTED
            NETWORK_STATS_CONNECTING
            NETWORK_STATS_PING
            NETWORK_STATS_AVG_SEND_TICK
            NETWORK_STATS_SEND_SECOND
            NETWORK_STATS_AVG_SEND
            NETWORK_STATS_MAX_SEND
            NETWORK_STATS_AVG_RECV
            NETWORK_STATS_MAX_RECV
            NETWORK_STATS_KBITS_UNIT
            LEVEL_EDITOR_QUIT
            LEVEL_EDITOR_SAVE
            LEVEL_EDITOR_LOAD
            LEVEL_EDITOR_PLACE
            LEVEL_EDITOR_MOVE
            LEVEL_EDITOR_SNAP
            LEVEL_EDITOR_GRID
            LEVEL_EDITOR_PREVIEW
            LEVEL_EDITOR_HELP
            LEVEL_EDITOR_ITEM_WALL_1
            LEVEL_EDITOR_ITEM_WALL_2
            LEVEL_EDITOR_ITEM_WALL_3
            LEVEL_EDITOR_ITEM_WALL_4
            LEVEL_EDITOR_ITEM_BARREL_SHORT
            LEVEL_EDITOR_ITEM_BARREL_TALL
            LEVEL_EDITOR_ITEM_SPAWN_POINT
            GAME_FPS
            GAME_SCOREBOARD_TITLE
            GAME_SCOREBOARD_TEAM
            GAME_SCOREBOARD_NAME
            GAME_SCOREBOARD_SCORE
            GAME_SCOREBOARD_ELIMINATIONS
            GAME_SCOREBOARD_DEATHS
            MENU_MAIN_PLAY
            MENU_MAIN_SETTINGS
            MENU_MAIN_QUIT
            MENU_PAUSE_TITLE
            MENU_PAUSE_INFORMATION
            MENU_PAUSE_RESUME
            MENU_PAUSE_SETTINGS
            MENU_PAUSE_QUIT
            MENU_CONFIRMATION_YES
            MENU_CONFIRMATION_NO
            MENU_CONFIRMATION_QUIT_GAME
            MENU_CONFIRMATION_CLOSE_GAME
            MENU_SETTINGS_TITLE
            MENU_SETTINGS_BACK
            MENU_SETTINGS_GENERAL
            MENU_SETTINGS_DISPLAY
            MENU_SETTINGS_CONTROLS
            MENU_SETTINGS_AUDIO
            MENU_SETTINGS_DEBUG
            MENU_SETTINGS_FOV
            MENU_SETTINGS_RAY_WIDTH
            MENU_SETTINGS_LANGUAGE
            MENU_SETTINGS_ASSETS_PACK
            MENU_SETTINGS_SHOW_FPS
            MENU_SETTINGS_FPS
            MENU_SETTINGS_TEXT_ANTI_ALIASING
            MENU_SETTINGS_RESOLUTION
            MENU_SETTINGS_FULLSCREEN
            MENU_SETTINGS_NETWORK_STATS
            MENU_SETTINGS_COMPONENTS_OUTLINE
            MENU_SETTINGS_RAYS_MINIMAP
            MENU_SETTINGS_ALL_ENTITIES_MINIMAP
            MENU_SETTINGS_LEVEL_EDITOR
            MENU_SETTINGS_LEVEL_EDITOR_OPEN
            MENU_SETTINGS_VOLUME_GLOBAL
            MENU_SETTINGS_VOLUME_MUSIC
            MENU_SETTINGS_VOLUME_EFFECTS
            MENU_CONNECTION_TITLE
            MENU_CONNECTION_BACK
            MENU_CONNECTION_JOIN
            MENU_CONNECTION_HOST
            MENU_CONNECTION_IP
            MENU_CONNECTION_PORT
            MENU_CONNECTION_HOSTED_PORT
            MENU_CONNECTION_STOP
            MENU_CONNECTION_SERVER_RUNNING
            MENU_CONNECTION_SERVER_STOPPED
            MENU_DISCONNECTED_TITLE
            MENU_DISCONNECTED_MENU
            MENU_SELECTION_TITLE
            MENU_SELECTION_START
            MENU_SELECTION_LEAVE
            MENU_SELECTION_GAME_MODE
            MENU_SELECTION_TEAMS
            MENU_SELECTION_PLAYERS
            GAME_MODE_SOLO
            GAME_MODE_TEAM
            GAME_MODE_SOLO_ELIMINATION
            GAME_MODE_TEAM_ELIMINATION
            TEAM_ALL
            TEAM_RED
            TEAM_BLUE
            TEAM_GREEN
            TEAM_YELLOW
            TEAM_ORANGE
            TEAM_PINK
            TEAM_BLACK
            TEAM_WHITE
        }

        class Language {
            language_content
            language

            load()
            set_language(language)
            get_language_list()
            get(key: LanguageKey)
        }
    }

    package graphics {
        enum ButtonState {
            NONE
            HOVERED
            PRESSED
            RELEASED
        }

        class Button {
            x
            y
            width
            height
            text_str
            text_key: LanguageKey
            action
            disabled: Boolean
            state: ButtonState

            disable()
            enable()
            is_disabled(): Boolean
            get_state(): ButtonState
            get_pos()
            get_text()
            update(mouse_x, mouse_y)
            is_hovered(): Boolean
            click_press()
            click_release()
            run_action()
        }

        class Text {
            reset(font, font_is_file: Boolean, size_multiplier)
            create_cache(size)
            clear_cache()
            generate_text(text, size, color)
            get_size(generated_text)
            blit(generated_text, x, y, align_x, align_y)
            text(text, x, y, size, color, align_x, align_y)
            get_surface(text, size, color)

            font
            font_is_file: Boolean
            size_multiplier
            cache
            create_cache(size)
            clear_cache()
            generate_text(text, size, color)
            get_size(generated_text)
            blit(generated_text, x, y, align_x, align_y)
            text(text, x, y, size, color, align_x, align_y)
        }

        class Texture {
            texture_cache
            cache_limit
            original_width
            original_height
            texture_original
            resize(size)
            get_surface()
            get_original_surface()
            get_original_size()
            reduce_cache()
            clear_cache()
            set_cache_limit(limit)
        }

        class Textures {
            textures
            load_texture(id, path, alpha: Boolean, custom_size, keep: Boolean)
            resize_texture(id, size)
            get_surface(id)
            get_original_surface(id)
            get_original_size(id)
            remove_texture(id)
            clear_cache()
            set_cache_limit(id, limit)
        }

        package components {
            class Component {
                language: Language
                text: Text
                data
                surface
                width
                height

                set_original_size(width, height)
                get_size()
                set_surface_size(width, height)
                resize()
                get()
                update(data)
                render()
            }

            enum ButtonType {
                MENU
                LEVEL_EDITOR
                LEVEL_EDITOR_ITEM
                SETTINGS_CATEGORY
                OPEN_FOLDER
                MINI_BUTTON
                GAME_MODE
            }

            class BackgroundMenu extends Component {
                update(events: EventInstance[])
            }

            class GraphicalElement extends Component {
                selected: Boolean

                is_selected(): Boolean
                set_selected(selected: Boolean)
                update(events: EventInstance[])
                render()
            }

            class GraphicalButton extends GraphicalElement {
                x
                y
                button_width
                button_height
                text_str
                text_key: LanguageKey
                action
                disabled: Boolean
                type: ButtonType
                button: Button

                set_text(text)
                set_text_key(text_key: LanguageKey)
                set_action(action)
                set_disabled(disabled: Boolean)
                set_relative_offset(offset_x, offset_y)
                get_state(): ButtonState
                update(events: EventInstance[])
            }

            class GraphicalCheckbox extends GraphicalElement {
                x
                y
                checkbox_width
                checkbox_height
                checked: Boolean
                check_action
                uncheck_action
                disabled: Boolean
                button: Button

                set_disabled(disabled: Boolean)
                set_relative_offset(offset_x, offset_y)
                toggle()
                update(events: EventInstance[])
            }

            class GraphicalComboBox extends GraphicalElement {
                x
                y
                choice_width
                choice_height
                choices
                choice
                change_action
                disabled: Boolean
                opened: Boolean
                relative_offset_x
                relative_offset_y
                mouse_x
                mouse_y
                max_elements
                button: Button
                choices_buttons: Button[]

                set_disabled(disabled: Boolean)
                set_relative_offset(offset_x, offset_y)
                toggle()
                open()
                close()
                select(key)
                update(events: EventInstance[])
            }

            class GraphicalNumberSelect extends GraphicalElement {
                x
                y
                min_value
                max_value
                step
                change_action
                current_value

                set_disabled(disabled: Boolean)
                set_relative_offset(offset_x, offset_y)
                decrease()
                increase()
                change(value)
                update(events: EventInstance[])
            }

            class GraphicalSlider extends GraphicalElement {
                x
                y
                min_value
                max_value
                precision
                change_action
                current_value
                percentage
                selecting: Boolean
                disabled: Boolean
                relative_offset_x
                relative_offset_y
                mouse_x
                mouse_y

                set_disabled(disabled: Boolean)
                set_relative_offset(offset_x, offset_y)
                select()
                update(events: EventInstance[])
            }

            class GraphicalText extends GraphicalElement {
                original_x
                original_y
                x
                y
                align_x
                align_y
                text_str
                text_key: LanguageKey
                size
                color

                get_text_to_render()
                update(events: EventInstance[])
            }

            class GraphicalTextInput extends GraphicalElement {
                x
                y
                input_width
                input_height
                input_value
                max_text_length
                focus_action
                unfocus_action
                int_only: Boolean
                max_int_value
                no_eval_banned_elements: Boolean
                disabled: Boolean
                focused: Boolean

                get_value()
                focus_event()
                unfocus_event()
                set_disabled(disabled: Boolean)
                set_relative_offset(offset_x, offset_y)
                update(events: EventInstance[])
            }

            class Crosshair extends Component {
                space_ratio

                update(is_running: Boolean, is_crouching: Boolean)
            }

            class Fps extends Component {
                update(fps)
            }

            class GameTimer extends Component {
                update(grace_period_seconds, grace_period_end, game_time_seconds, game_time_end)
            }

            class HUD extends Component {
                deactivation_time_ratio
                can_attack: Boolean
                size_multiplier

                update(deactivation_time_ratio, can_attack: Boolean)
            }

            class LaserGun extends Component {
                offset_x
                offset_y
                total_time
                multiplier
                is_shooting

                update(is_moving: Boolean, is_running: Boolean, is_crouching: Boolean, is_shooting: Boolean)
            }

            class Leaderboard extends Component {
                update(leaderboard)
            }

            class Minimap extends Component {
                update(map, map_bounds, entities: GameEntity[], rays: Ray[])
            }

            class NetworkStats extends Component {
                update(pings, connected: Boolean, bytes_sent, bytes_received)
            }

            class Scoreboard extends Component {
                update(entities: GameEntity[])
            }

            class "World" as WorldComponent extends Component {
                crosshair: Crosshair
                hud: HUD

                update(rays: Ray[], entities: GameEntity[], current_entity: GameEntity)
                position_to_screen(point: Point)
            }

            package LevelEditor {
                enum EditorState {
                    PLACE
                    MOVE
                }

                enum Item {
                    WALL_1
                    WALL_2
                    WALL_3
                    WALL_4
                    BARREL_SHORT
                    BARREL_TALL
                    SPAWN_POINT
                }

                class ItemMenu extends Component {
                    mouse_x
                    mouse_y
                    selected_item_index
                    buttons: GraphicalButton[]
                    scroll
                    scroll_max
                    scroll_step

                    get_selected_item(): Item
                    move_buttons(y_value)
                    in_view_screen(point: Point)
                    update(events: EventInstance[], relative_offset)
                }

                class Toolbar extends Component {
                    mouse_x
                    mouse_y
                    editor_state: EditorState
                    snap_to_grid: Boolean
                    show_grid: Boolean
                    preview: Boolean
                    place_button: Button
                    move_button: Button
                    snap_to_grid_button: Button
                    show_grid_button: Button
                    preview_button: Button
                    buttons: GraphicalButton[]

                    get_editor_state(): EditorState
                    get_view_variables()
                    quit()
                    update(events: EventInstance[], relative_offset)
                }

                class View extends Component {
                    mouse_x
                    mouse_y
                    cell_size
                    max_cell_size
                    min_cell_size
                    center_transition_speed
                    center_x_transition
                    center_y_transition
                    center_x
                    center_y
                    delta_time
                    walls: Wall[]
                    entities: GameEntity[]
                    spawn_points: Point[]
                    scroll_step
                    move_speed
                    preview_radius
                    snap_to_grid: Boolean
                    show_grid: Boolean
                    preview: Boolean
                    editor_state: EditorState
                    selected_item: Item
                    position_aimed: Point
                    min_selection_distance
                    placing_or_moving: Boolean
                    selected_elements: Point[]

                    get_map_data()
                    set_map_data(map_data)
                    set_editor_state(editor_state: EditorState)
                    set_selected_item(item: Item)
                    set_view_variables(snap_to_grid: Boolean, show_grid: Boolean, preview: Boolean)
                    get_walls(): Wall[]
                    reset_center()
                    screen_position_to_world_point(x, y): Point
                    world_point_to_screen_position(point: Point)
                    in_view_screen(): Boolean
                    in_view_world(): Boolean
                    in_view_world_rect(): Boolean
                    snap_coordinates(point: Point): Point
                    draw_line(line: Line, color)
                    display_grid()
                    manage_click(mouse_left_click_press: Boolean, mouse_left_click_release: Boolean, mouse_right_click_press: Boolean)
                    find_nearest_object_position(point: Point): Point
                    delete_element_containing_point(point: Point)
                    cancel_placing_or_moving()
                    update(events: EventInstance[], relative_offset)
                }

                class "LevelEditor" as LevelEditorComponent extends Component, Menu {
                    toolbar: Toolbar
                    item_menu: ItemMenu
                    view: View
                    components
                    text: Text
                    mouse_x
                    mouse_y
                    toolbar_position
                    item_menu_position
                    view_position

                    load()
                    save()
                    update(events: EventInstance[])
                }

                ItemMenu --> Item
                Toolbar --> EditorState
                View --> Item
                View --> EditorState
                LevelEditorComponent --> Toolbar
                LevelEditorComponent --> ItemMenu
                LevelEditorComponent --> View
            }

            package menus {
                class Menu {
                    elements: GraphicalElement[]
                    active: Boolean
                    add_event_function

                    resize()
                    update(events: EventInstance[], no_escape: Boolean)
                    add_event(event: EventInstance)
                    is_active(): Boolean
                    set_active(active: Boolean)
                    deactivate_event()
                }

                class Menus {
                    menus: Menu[]
                    menu_events: EventInstance[]

                    init_menus()
                    add_event(event: EventInstance)
                    get_events(): EventInstance[]
                    resize()
                    update(events: EventInstance[])
                    get_menus(): Menu[]
                    open_menu(menu: Menu)
                }

                class ModeTeamSelectionMenu extends Component, Menu {
                    game: Game
                    callback_quit
                    menu_box_width
                    menu_box_height
                    border_margin
                    button_width
                    button_height
                    teams_button : GraphicalButton
                    default_elements: GraphicalElement[]
                    pages_buttons: GraphicalButton[]
                    pages_elements
                    elements
                    selected_mode: Mode
                    available_teams: Team[]
                    team_areas
                    players
                    players_areas
                    grab_player_id
                    mouse_x
                    mouse_y
                    current_page

                    select_mode(mode: Mode)
                    refresh()
                    switch_page(page)
                    is_hovered(rect): Boolean
                    quit()
                    update(events: EventInstance[])
                }

                class Confirmation extends Component, Menu {
                    text_key
                    callback_yes
                    callback_no
                    callback_cancel
                    confirmation_box_width
                    confirmation_box_height

                    yes()
                    no()
                    cancel()
                    update(events: EventInstance[])
                }

                class ConnectionMenu extends Component, Menu {
                    game: Game
                    callback_main_menu
                    menu_box_width
                    menu_box_height
                    back_button: GraphicalButton
                    join_button_client: GraphicalButton
                    host_button_server: GraphicalButton
                    join_button_server: GraphicalButton
                    status_text: GraphicalText
                    hosted_port_text: GraphicalText
                    elements

                    update_input_value(update_callback)
                    back_action()
                    update(events: EventInstance[])
                }

                class Disconnected extends Component, Menu {
                    callback_menu
                    box_width
                    box_height

                    menu()
                    update(events: EventInstance[])
                }

                class MainMenu extends Component, Menu {
                    callback_play
                    callback_settings
                    callback_quit
                    can_deactivate: Boolean

                    play()
                    settings()
                    quit()
                    update(events: EventInstance[])
                }

                class PauseMenu extends Component, Menu {
                    callback_resume
                    callback_quit
                    block_resume: Boolean

                    resume()
                    settings()
                    quit()
                    update(events: EventInstance[])
                }

                class SettingsMenu extends Component, Menu {
                    settings_box_width
                    settings_box_height
                    back_button : GraphicalButton
                    default_elements: GraphicalElement[]
                    pages_buttons: GraphicalButton[]
                    pages_elements
                    elements

                    change_screen_resolution(value)
                    change_fullscreen(value)
                    change_ray_width(value)
                    change_assets(assets_folder)
                    change_language(language)
                    switch_settings_page(page)
                    update(events: EventInstance[])
                }
            }

            Component --> Language
        }

        class Display {
            screen
            refresh_display(free_aspect_ratio)
            screenshot()
        }

        class Renderer {
            clock
            menus: Menus
            last_game_paused: Boolean
            last_level_editor: Boolean
            close_game: Boolean
            components: Component[]

            set_network_stats(pings, connected: Boolean, bytes_sent, bytes_received)
            init_components()
            close_game_event(): Boolean
            resize()
            update(game: Game, events: EventInstance[])
            open_level_editor()
            quit(game)
            open_main_menu(game)
            render(game: Game)
        }

        Button --> ButtonState
        Renderer --> Component
    }

    class __main__ {}

    __main__ --> configuration
    __main__ --> Game
    __main__ --> Renderer
    __main__ --> Server
    __main__ --> Client
    __main__ --> Event
}

@enduml
